import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { QuizQuestion } from "./QuizQuestion";
import { QuizProgress } from "./QuizProgress";
import { QuizResults } from "./QuizResults";

const quizData = [
  {
    pillar: "Autoconocimiento",
    icon: "üß†",
    questions: [
      "¬øReconozco con facilidad qu√© emoci√≥n estoy sintiendo en diferentes situaciones?",
      "¬øSoy capaz de ponerle nombre a mis emociones cuando las experimento?",
      "¬øPuedo identificar con precisi√≥n las emociones que sienten los dem√°s?",
      "¬øPresto atenci√≥n al lenguaje corporal y facial para entender mejor c√≥mo se sienten las personas?"
    ],
    exercises: [
      "Escribir tres emociones frecuentes y tres que quisieras cambiar",
      "Escribirse una carta personal sobre situaciones emocionales",
      "Registrar emociones cuando suena una se√±al",
      "Reflexionar sobre el yo p√∫blico vs privado",
      "Tomar conciencia del lenguaje emocional personal",
      "Hacer un dibujo sobre c√≥mo fue la semana emocionalmente"
    ]
  },
  {
    pillar: "Regulaci√≥n emocional",
    icon: "üí°",
    questions: [
      "¬øPuedo identificar qu√© me llev√≥ a sentir una emoci√≥n y c√≥mo eso influye en mi conducta?",
      "¬øExpreso mis emociones de forma adecuada, sin da√±ar a otros ni reprimirlas?",
      "¬øUtilizo estrategias como el di√°logo, la respiraci√≥n, el deporte o la distracci√≥n para calmarme cuando estoy alterado/a?",
      "¬øSoy capaz de manejar la frustraci√≥n cuando las cosas no salen como espero?"
    ],
    exercises: [
      "Contar hasta 20 antes de reaccionar",
      "Practicar respiraci√≥n consciente",
      "Usar m√∫sica para regular emociones",
      "Hacer actividad f√≠sica cuando hay tensi√≥n mental",
      "Practicar comunicaci√≥n asertiva",
      "Convertir experiencias negativas en oportunidades de crecimiento"
    ]
  },
  {
    pillar: "Autonom√≠a emocional y autoestima",
    icon: "üå±",
    questions: [
      "¬øMe acepto tal como soy, con mis virtudes y defectos?",
      "¬øMe siento confiado/a en mis habilidades para enfrentar nuevos desaf√≠os?",
      "¬øSoy capaz de motivarme a m√≠ mismo/a incluso en situaciones dif√≠ciles?",
      "¬øReconozco y valoro tanto mis logros como mis limitaciones personales?"
    ],
    exercises: [
      "Escribir 'yo soy capaz de...' regularmente",
      "Escribir 'me merezco...' y 'me doy permiso para...'",
      "Fijar metas alcanzables y celebrar logros",
      "Mantener di√°logo interno constructivo",
      "Practicar la auto-compasi√≥n y aceptaci√≥n",
      "Escribir los logros diarios"
    ]
  },
  {
    pillar: "Habilidades socioemocionales",
    icon: "ü´Ç",
    questions: [
      "¬øMe comunico con respeto y escucho activamente cuando alguien me habla?",
      "¬øSoy capaz de expresar mis emociones sin agredir ni reprimirme, de forma asertiva?",
      "¬øIntento comprender c√≥mo se sienten los dem√°s y ofrecer apoyo si lo necesitan?",
      "¬øResuelvo conflictos buscando acuerdos sin recurrir a la violencia o el silencio?"
    ],
    exercises: [
      "Incorporar emociones en el di√°logo habitual",
      "Registrar emociones de otros durante interacciones",
      "Practicar felicitar y agradecer a otros",
      "Ofrecer ayuda en trabajos comunes",
      "Permitirse recibir ayuda de otros",
      "Practicar estrategias de resoluci√≥n de conflictos"
    ]
  },
  {
    pillar: "Habilidades para la vida",
    icon: "üåç",
    questions: [
      "¬øIdentifico los problemas con claridad antes de buscar soluciones?",
      "¬øSoy capaz de organizar mi tiempo y priorizar mis tareas cotidianas eficazmente?",
      "¬øTomo decisiones con responsabilidad, teniendo en cuenta consecuencias y valores personales?",
      "¬øBusco ayuda cuando la necesito y s√© a qui√©n acudir para resolver una dificultad?"
    ],
    exercises: [
      "Participar en eventos divertidos y desarrollar sentido del humor",
      "Hacer actividad f√≠sica regularmente",
      "Disfrutar actividades placenteras conscientemente",
      "Escribir un diario para auto-reflexi√≥n",
      "Participar en actividades de voluntariado",
      "Mantener equilibrio entre trabajo, familia y descanso"
    ]
  }
];

export const EmotionalQuiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, number>>({});
  const [showResults, setShowResults] = useState(false);
  const [hasStarted, setHasStarted] = useState(false);

  const totalQuestions = quizData.reduce((sum, pillar) => sum + pillar.questions.length, 0);
  
  const getCurrentQuestionData = () => {
    let questionIndex = 0;
    for (const pillar of quizData) {
      if (currentQuestion < questionIndex + pillar.questions.length) {
        return {
          pillar: pillar.pillar,
          icon: pillar.icon,
          question: pillar.questions[currentQuestion - questionIndex],
          pillarIndex: quizData.indexOf(pillar)
        };
      }
      questionIndex += pillar.questions.length;
    }
    return null;
  };

  const handleAnswer = (value: number) => {
    setAnswers(prev => ({ ...prev, [currentQuestion]: value }));
  };

  const handleNext = () => {
    if (currentQuestion < totalQuestions - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      setShowResults(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1);
    }
  };

  const calculateResults = () => {
    return quizData.map((pillar, pillarIndex) => {
      const pillarStartIndex = quizData.slice(0, pillarIndex).reduce((sum, p) => sum + p.questions.length, 0);
      const pillarAnswers = pillar.questions.map((_, questionIndex) => 
        answers[pillarStartIndex + questionIndex] || 0
      );
      const score = pillarAnswers.reduce((sum, answer) => sum + answer, 0);
      
      return {
        name: pillar.pillar,
        icon: pillar.icon,
        score,
        maxScore: pillar.questions.length * 5,
        level: "",
        exercises: pillar.exercises
      };
    });
  };

  const handleRestart = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
    setHasStarted(false);
  };

  if (!hasStarted) {
    return (
      <div className="min-h-screen bg-gradient-calm flex items-center justify-center p-4">
        <Card className="max-w-2xl w-full p-8 text-center shadow-glow border-0 bg-card/90 backdrop-blur-sm">
          <div className="text-6xl mb-6">üß†üíù</div>
          <h1 className="text-4xl font-bold mb-6 bg-gradient-wellness bg-clip-text text-transparent">
            Evaluaci√≥n de Educaci√≥n Emocional
          </h1>
          <p className="text-lg text-muted-foreground mb-8 leading-relaxed">
            Descubre tu nivel de inteligencia emocional y recibe recomendaciones personalizadas 
            para fortalecer tus competencias emocionales. Este cuestionario eval√∫a los cinco 
            pilares fundamentales del bienestar emocional.
          </p>
          
          <div className="grid grid-cols-5 gap-4 mb-8">
            {quizData.map((pillar, index) => (
              <div key={index} className="text-center">
                <div className="text-3xl mb-2">{pillar.icon}</div>
                <p className="text-xs text-muted-foreground">{pillar.pillar}</p>
              </div>
            ))}
          </div>
          
          <Button 
            onClick={() => setHasStarted(true)}
            size="lg"
            className="bg-gradient-wellness hover:shadow-glow transition-all duration-300 text-lg px-8 py-6"
          >
            Comenzar Evaluaci√≥n
          </Button>
          
          <p className="text-sm text-muted-foreground mt-6">
            ‚è±Ô∏è Tiempo estimado: 5-10 minutos ‚Ä¢ üìä {totalQuestions} preguntas
          </p>
        </Card>
      </div>
    );
  }

  if (showResults) {
    return (
      <div className="min-h-screen bg-gradient-calm p-4">
        <div className="max-w-4xl mx-auto">
          <QuizResults results={calculateResults()} onRestart={handleRestart} />
        </div>
      </div>
    );
  }

  const questionData = getCurrentQuestionData();
  
  if (!questionData) return null;

  return (
    <div className="min-h-screen bg-gradient-calm p-4">
      <div className="max-w-3xl mx-auto">
        <QuizProgress currentQuestion={currentQuestion + 1} totalQuestions={totalQuestions} />
        
        <QuizQuestion
          question={questionData.question}
          value={answers[currentQuestion] || null}
          onChange={handleAnswer}
          pillarIcon={questionData.icon}
          pillarName={questionData.pillar}
        />
        
        <div className="flex justify-between mt-8">
          <Button 
            variant="outline" 
            onClick={handlePrevious}
            disabled={currentQuestion === 0}
            className="hover:shadow-soft transition-all duration-300"
          >
            Anterior
          </Button>
          
          <Button 
            onClick={handleNext}
            disabled={!answers[currentQuestion]}
            className="bg-gradient-wellness hover:shadow-glow transition-all duration-300"
          >
            {currentQuestion === totalQuestions - 1 ? "Ver Resultados" : "Siguiente"}
          </Button>
        </div>
      </div>
    </div>
  );
};